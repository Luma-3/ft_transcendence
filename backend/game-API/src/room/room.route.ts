import { FastifyRequest, FastifyReply } from 'fastify';
import { RoomService } from './room.service.js';
// import { redisSub } from '../utils/redis.js';

// import { RoomInfoSchema, RoomParametersSchema, RoomPlayerParametersSchema } from './room.schema.js';
import { PlayerInitialSchema, GameIdSchema, HeaderBearer } from './player.schema.js';
import { ResponseSchema } from '../utils/schema.js';

import { FastifyPluginAsyncTypebox } from "@fastify/type-provider-typebox";

import { PlayerInitialType } from './player.schema.js';

import { InternalServerErrorResponse } from '@transcenduck/error';
import { RoomInfoSchema } from './player.schema.js';


const route: FastifyPluginAsyncTypebox = async (fastify) => {
  /**
   * Creation d'une partie de jeu
   */
  fastify.post('/rooms/join', {
    schema: {
      body: PlayerInitialSchema,
      headers: HeaderBearer,
      response: {
        201: ResponseSchema(GameIdSchema, 'Player added to room'),
        500: InternalServerErrorResponse
      }
    }
  }, async (req: FastifyRequest<{ Body: PlayerInitialType }>, rep: FastifyReply) => {

    const { player_name, game_type, game_name } = req.body;
    const user_id = req.headers['x-user-id'] as string;

    /**
     * Verification si le joueur est deja dans une partie
     * Renvoie le roomId d'une nouvelle room ou d'une room existante
    */
    const player = {
      user_id: user_id,
      player_name: player_name,
      ready: false,
    }

    const roomId = RoomService.joinOrCreateRoom(player, game_name, game_type);
    if (!roomId) {
      return rep.code(201).send({
        message: "Player already locked a Room",
        data: { game_id: '' }
      });
    }


    // const player : PlayerType = {
    // 	playerId: user_id, //TODO: should be generated by the gateway
    // 	gameName: game_name,
    // 	clientId: '0',
    // 	joined: false,
    // 	ready: false,
    // 	score: 0
    // };


    return rep.code(201).send({
      message: 'Room found or create for player',
      data: { game_id: roomId }
    });
  });

  fastify.get('/rooms/:game_id', {
    schema: {
      params: GameIdSchema,
      response: {
        200: ResponseSchema(RoomInfoSchema, 'Room info retrieved'),
        500: InternalServerErrorResponse
      }
    }
  }, async (req, rep) => {
    const roomId = req.params.game_id;
    const room = RoomService.getRoomById(roomId);

    return rep.code(200).send({
      message: 'Room info retrieved',
      data: room.toJSON()
    });
  });
}

// fastify.get('/rooms/:roomId', {
// 	schema: {
// 		params: RoomParametersSchema,
// 		response: {
// 			200: ResponseSchema(RoomInfoSchema, 'Room info retrieved'),
// 			500: InternalServerErrorResponse
// 		}
// 	}
// }, async (req: FastifyRequest<{Params: RoomParametersType}>, rep: FastifyReply) => {
// 	const roomId = req.params.roomId;
// 	const room = gameService.getRoom(roomId);

// 	if (!room) {
// 		return rep.code(500).send({
// 			message: 'Room not found'
// 		});
// 	}

// 	return rep.code(200).send({
// 		message: 'Room info retrieved',
// 		data: room.roomInfos()
// 	});
// });

// fastify.get('/rooms/:roomId/players', {
// 	schema: {
// 		params: RoomParametersSchema,
// 		response: {
// 			200: ResponseSchema(PlayersInfoSchema, 'Players list retrived'),
// 			500: InternalServerErrorResponse
// 		}
// 	}
// }, async (req: FastifyRequest<{Params: RoomParametersType}>, rep: FastifyReply) => {
// 	const room = gameService.getRoom(req.params.roomId);

// 	if (!room) {
// 		throw new NotFoundError("Room");
// 	}

// 	return rep.code(200).send({
// 		message: 'Players list retrived',
// 		data: room.toJSON().players
// 	});
// });

// fastify.get('/rooms/:roomId/players/:playerId', {
// 	schema: {
// 		params: RoomPlayerParametersSchema,
// 		response: {
// 			200: ResponseSchema(PlayerInfoSchema, 'Player info retrieved'),
// 			500: InternalServerErrorResponse
// 		}
// 	}
// }, async (req: FastifyRequest<{Params: RoomPlayerParametersType}>, rep: FastifyReply) => {
// 	const room = gameService.getRoom(req.params.roomId);
// 	if (!room) {
// 		return rep.code(500).send({ message: 'Room not found' });
// 	}

// 	const player = room.getPlayerById(req.params.playerId);
// 	if (!player) {
// 		return rep.code(500).send({
// 			message: `Player not found in room ${req.params.roomId}`
// 		});
// 	}

// 	const playerInfo = {
// 		playerId: player.playerId,
// 		gameName: player.gameName,
// 		ready: player.ready
// 	}

// 	return rep.code(200).send({
// 		message: 'Player infos retrived',
// 		data: playerInfo
// 	});
// });

// fastify.get('/rooms/:roomId/opponents/:playerId', {
// 	schema: {
// 		params: RoomPlayerParametersSchema,
// 		response: {
// 			200: ResponseSchema(PlayersInfoSchema, 'Opponents List retrieved'),
// 			500: InternalServerErrorResponse
// 		}
// 	}
// }, async (req: FastifyRequest<{Params: RoomPlayerParametersType}>, rep: FastifyReply) => {
// 	const room = gameService.getRoom(req.params.roomId);
// 	if (!room) {
// 		return rep.code(500).send({ message: 'Room not found' });
// 	}

// 	const player = room.getPlayerById(req.params.playerId);
// 	if (!player) {
// 		return rep.code(500).send({ message: 'player not found' });
// 	}

// 	const opponents = room.userOpponentInfo(player);

// 	return rep.code(200).send({ message: 'Player infos retrived', data: opponents });
// });


export default route;

// export async function handlerEvent() {
// 	redisSub.subscribe('ws.game.in', (raw: string) => {
// 		const message = JSON.parse(raw);
// 		gameService.handleEvent(message.clientId, message.payload);
// 	})

// 	// redisSub.subscribe('ws.broadcast.disconnect', (raw: string) => {
// 	//   const message = JSON.parse(raw);
// 	//   gameService.leave_room());
// 	// })
// }
